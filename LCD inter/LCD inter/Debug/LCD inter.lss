
LCD inter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000206  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea1  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b9  00000000  00000000  0000121d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000618  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000080d  00000000  00000000  000024e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002cf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  7a:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
	}
}
void LCD_display_char( const char *chr )

{
	LCD_data(chr);
  82:	85 bb       	out	0x15, r24	; 21
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	8b bb       	out	0x1b, r24	; 27
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	84 60       	ori	r24, 0x04	; 4
  94:	8b bb       	out	0x1b, r24	; 27
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_command+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_command+0x1e>
  a0:	00 00       	nop
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_command+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_command+0x30>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <LCD_data>:
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_data+0x18>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_data+0x1e>
  d4:	00 00       	nop
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_data+0x2a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_data+0x30>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_init>:
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	8a bb       	out	0x1a, r24	; 26
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	93 e1       	ldi	r25, 0x13	; 19
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_init+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_init+0x14>
  fe:	00 00       	nop
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 112:	83 ef       	ldi	r24, 0xF3	; 243
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_init+0x2c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_init+0x32>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <LCD_display_string>:
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	8c 01       	movw	r16, r24
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
 12e:	09 c0       	rjmp	.+18     	; 0x142 <LCD_display_string+0x22>
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_data>
 134:	87 ea       	ldi	r24, 0xA7	; 167
 136:	91 e6       	ldi	r25, 0x61	; 97
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_display_string+0x18>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_display_string+0x1e>
 13e:	00 00       	nop
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f1 cf       	rjmp	.-30     	; 0x130 <LCD_display_string+0x10>
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <LCD_create_char>:
}

void LCD_create_char(unsigned char location, unsigned char charmap[]) {
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	8b 01       	movw	r16, r22
	location &= 0x07; // Only 0–7 allowed
 162:	87 70       	andi	r24, 0x07	; 7
	LCD_command(0x40 | (location << 3)); // Set CGRAM address
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	80 64       	ori	r24, 0x40	; 64
 174:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	87 ea       	ldi	r24, 0xA7	; 167
 17a:	91 e6       	ldi	r25, 0x61	; 97
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_create_char+0x24>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_create_char+0x2a>
 182:	00 00       	nop
	_delay_ms(100);
	for (int i = 0; i < 8; i++) {
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <LCD_create_char+0x4c>
		LCD_data(charmap[i]); // Send row pattern
 18a:	f8 01       	movw	r30, r16
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	80 81       	ld	r24, Z
 192:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_data>
 196:	87 ea       	ldi	r24, 0xA7	; 167
 198:	91 e6       	ldi	r25, 0x61	; 97
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_create_char+0x42>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_create_char+0x48>
 1a0:	00 00       	nop

void LCD_create_char(unsigned char location, unsigned char charmap[]) {
	location &= 0x07; // Only 0–7 allowed
	LCD_command(0x40 | (location << 3)); // Set CGRAM address
	_delay_ms(100);
	for (int i = 0; i < 8; i++) {
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	c8 30       	cpi	r28, 0x08	; 8
 1a6:	d1 05       	cpc	r29, r1
 1a8:	84 f3       	brlt	.-32     	; 0x18a <LCD_create_char+0x32>
		LCD_data(charmap[i]); // Send row pattern
		_delay_ms(100);
	}
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <main>:
/*Make characters move up/down across the two lines in a “wave” motion.
	/*LCD_init();
	wave_animation("Thisissocool");*/


	LCD_init();
 1b4:	0e 94 75 00 	call	0xea	; 0xea <LCD_init>
	LCD_create_char(0, sheen); // Custom block at position 0
 1b8:	60 e6       	ldi	r22, 0x60	; 96
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_create_char>
 1c2:	83 ec       	ldi	r24, 0xC3	; 195
 1c4:	99 e0       	ldi	r25, 0x09	; 9
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x12>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x18>
 1cc:	00 00       	nop
	
	_delay_ms(10);
	LCD_command(0x01); // Clear
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 1d4:	83 ec       	ldi	r24, 0xC3	; 195
 1d6:	99 e0       	ldi	r25, 0x09	; 9
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x24>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x2a>
 1de:	00 00       	nop
	_delay_ms(10);
LCD_command(0xC0);
 1e0:	80 ec       	ldi	r24, 0xC0	; 192
 1e2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 1e6:	87 e8       	ldi	r24, 0x87	; 135
 1e8:	93 e1       	ldi	r25, 0x13	; 19
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x36>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x3c>
 1f0:	00 00       	nop
	_delay_ms(20);
	LCD_display_string("Loading...");
 1f2:	88 e6       	ldi	r24, 0x68	; 104
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 90 00 	call	0x120	; 0x120 <LCD_display_string>
	LCD_data(0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_data>
 200:	ff cf       	rjmp	.-2      	; 0x200 <main+0x4c>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
